{
    "info": {
      "_postman_id": "80c49774-4df6-4d71-849e-4692a7560f39",
      "name": "Projet1-Groupe1",
      "description": "## Feature : Create a non-regression test suite for managing a repository with the Github API\n\nMandatory step : Obtaining your GitHub personal access token\n\n### @nominal\n\n### Scenario 1: Create repository using GitHub API should return 201 status\n\nGiven API url ‘[https://api.github.com/’](https://api.github.com/user/repos’) is up and running  \nAnd header Authorization = 'Bearer ' + GitHubAPIToken  \nWhen a user performs a POST request to ‘[https://api.github.com/user/repos’](https://api.github.com/user/repos’) with below details  \n{name: \"{{randomFirstName}}\", description: \"{{randomCatchPhraseDescriptor}}\"}  \nAnd perform the post request  \nThen the response code should be 201  \nAnd the user should see json response with  \nmatch $ == {name:\"{{randomFirstName}}\",description:\"{{randomCatchPhraseDescriptor}}\"}  \nAnd the specified repository should be created\n\n### @nominal\n\n### Scenario 2: Update repository using GitHub API should return 200 status\n\nGiven API url ‘[https://api.github.com/’](https://api.github.com/user/repos’) is up and running  \nAnd header Authorization = 'Bearer ' + GitHubAPIToken  \nWhen a user performs a PATCH request to ‘[https://api.github.com/repos/{{userName}}/{{repoName}}’](https://api.github.com/repos/{{userName}}/{{repoName}}’) with below details  \n{name: \"{{randomFirstName}}\", description: \"{{randomCatchPhraseDescriptor}}\"}  \nThen the response code should be 200  \nAnd the user should see json response with  \nmatch $ == {name:\"{{randomFirstName}}\",description:\"{{randomCatchPhraseDescriptor}}\"}  \nAnd the specified repository should be updated\n\n### @nominal\n\n### Scenario 3: Delete repository using GitHub API should return 204 status\n\nGiven API url ‘[https://api.github.com/’](https://api.github.com/user/repos’) is up and running  \nAnd header Authorization = 'Bearer ' + GitHubAPIToken  \nWhen a user performs a DELETE request to ‘[https://api.github.com/repos/{{userName}}/{{repoName}}’](https://api.github.com/repos/{{userName}}/{{repoName}}’) with query parameters as \"[{{userName}}/{{repoName}}](https://api.github.com/repos/{{userName}}/{{repoName}}’)\"  \nThen the response code should be 204  \nAnd the specified repository should be deleted\n\n### @nominal\n\n### Scenario 4: Get repositories using GitHub API should return 200 status\n\nGiven API url ‘[https://api.github.com/’](https://api.github.com/user/repos’) is up and running  \nAnd header Authorization = 'Bearer ' + GitHubAPIToken  \nWhen a user performs a GET request to ‘[https://api.github.com/{{userName}}/repos’](https://api.github.com/{{userName}}/repos’)  \nThen the response code should be 200  \nAnd the user should see json response with all repositories listed",
      "schema": "https://schema.getpostman.com/json/collection/v2.0.0/collection.json"
    },
    "item": [
      {
        "name": "Etape 2 T1 Create Repo",
        "item": [
          {
            "name": "Create Repo",
            "event": [
              {
                "listen": "test",
                "script": {
                  "type": "text/javascript",
                  "exec": [
                    " // Déclaration des variables afin de récupérer la réponse de la requête au format JSON\r",
                    " // On stocke la réponse de la requête dans une variable \r",
                    " let jsonData = pm.response.json();\r",
                    " //On stocke le nom du repo généré aléatoirement dans une variable\r",
                    " let nameR = jsonData.name;\r",
                    " //On assigne la valeur du nom du repo dans une variable d'environnement \r",
                    " pm.environment.set(\"envNameR\", nameR);\r",
                    " \r",
                    " // test si le statut de la réponse est en succès\r",
                    " pm.test(\"Status response is ok\", function () {\r",
                    "    pm.response.to.have.status(201);\r",
                    "    });\r",
                    "\r",
                    "//test si le nom du repo correspond bien à l'attendu\r",
                    "pm.test(\"The repository name is correct\", function(){\r",
                    "  pm.expect(jsonData.name).to.be.eq(pm.environment.get(\"envNameR\"))\r",
                    "})\r",
                    "\r",
                    "// le schema json de sortie\r",
                    "const schema={\r",
                    "  \"type\": \"object\",\r",
                    "  \"properties\": {\r",
                    "    \"id\": {\r",
                    "      \"type\": \"integer\"\r",
                    "    },\r",
                    "    \"node_id\": {\r",
                    "      \"type\": \"string\"\r",
                    "    },\r",
                    "    \"name\": {\r",
                    "      \"type\": \"string\"\r",
                    "    },\r",
                    "    \"full_name\": {\r",
                    "      \"type\": \"string\"\r",
                    "    },\r",
                    "    \"private\": {\r",
                    "      \"type\": \"boolean\"\r",
                    "    },\r",
                    "    \"owner\": {\r",
                    "      \"type\": \"object\",\r",
                    "      \"properties\": {\r",
                    "        \"login\": {\r",
                    "          \"type\": \"string\"\r",
                    "        },\r",
                    "        \"id\": {\r",
                    "          \"type\": \"integer\"\r",
                    "        },\r",
                    "        \"node_id\": {\r",
                    "          \"type\": \"string\"\r",
                    "        },\r",
                    "        \"avatar_url\": {\r",
                    "          \"type\": \"string\"\r",
                    "        },\r",
                    "        \"gravatar_id\": {\r",
                    "          \"type\": \"string\"\r",
                    "        },\r",
                    "        \"url\": {\r",
                    "          \"type\": \"string\"\r",
                    "        },\r",
                    "        \"html_url\": {\r",
                    "          \"type\": \"string\"\r",
                    "        },\r",
                    "        \"followers_url\": {\r",
                    "          \"type\": \"string\"\r",
                    "        },\r",
                    "        \"following_url\": {\r",
                    "          \"type\": \"string\"\r",
                    "        },\r",
                    "        \"gists_url\": {\r",
                    "          \"type\": \"string\"\r",
                    "        },\r",
                    "        \"starred_url\": {\r",
                    "          \"type\": \"string\"\r",
                    "        },\r",
                    "        \"subscriptions_url\": {\r",
                    "          \"type\": \"string\"\r",
                    "        },\r",
                    "        \"organizations_url\": {\r",
                    "          \"type\": \"string\"\r",
                    "        },\r",
                    "        \"repos_url\": {\r",
                    "          \"type\": \"string\"\r",
                    "        },\r",
                    "        \"events_url\": {\r",
                    "          \"type\": \"string\"\r",
                    "        },\r",
                    "        \"received_events_url\": {\r",
                    "          \"type\": \"string\"\r",
                    "        },\r",
                    "        \"type\": {\r",
                    "          \"type\": \"string\"\r",
                    "        },\r",
                    "        \"site_admin\": {\r",
                    "          \"type\": \"boolean\"\r",
                    "        }\r",
                    "      },\r",
                    "      \"required\": [\r",
                    "        \"login\",\r",
                    "        \"id\",\r",
                    "        \"node_id\",\r",
                    "        \"avatar_url\",\r",
                    "        \"gravatar_id\",\r",
                    "        \"url\",\r",
                    "        \"html_url\",\r",
                    "        \"followers_url\",\r",
                    "        \"following_url\",\r",
                    "        \"gists_url\",\r",
                    "        \"starred_url\",\r",
                    "        \"subscriptions_url\",\r",
                    "        \"organizations_url\",\r",
                    "        \"repos_url\",\r",
                    "        \"events_url\",\r",
                    "        \"received_events_url\",\r",
                    "        \"type\",\r",
                    "        \"site_admin\"\r",
                    "      ]\r",
                    "    },\r",
                    "    \"html_url\": {\r",
                    "      \"type\": \"string\"\r",
                    "    },\r",
                    "    \"description\": {\r",
                    "      \"type\": \"string\"\r",
                    "    },\r",
                    "    \"fork\": {\r",
                    "      \"type\": \"boolean\"\r",
                    "    },\r",
                    "    \"url\": {\r",
                    "      \"type\": \"string\"\r",
                    "    },\r",
                    "    \"forks_url\": {\r",
                    "      \"type\": \"string\"\r",
                    "    },\r",
                    "    \"keys_url\": {\r",
                    "      \"type\": \"string\"\r",
                    "    },\r",
                    "    \"collaborators_url\": {\r",
                    "      \"type\": \"string\"\r",
                    "    },\r",
                    "    \"teams_url\": {\r",
                    "      \"type\": \"string\"\r",
                    "    },\r",
                    "    \"hooks_url\": {\r",
                    "      \"type\": \"string\"\r",
                    "    },\r",
                    "    \"issue_events_url\": {\r",
                    "      \"type\": \"string\"\r",
                    "    },\r",
                    "    \"events_url\": {\r",
                    "      \"type\": \"string\"\r",
                    "    },\r",
                    "    \"assignees_url\": {\r",
                    "      \"type\": \"string\"\r",
                    "    },\r",
                    "    \"branches_url\": {\r",
                    "      \"type\": \"string\"\r",
                    "    },\r",
                    "    \"tags_url\": {\r",
                    "      \"type\": \"string\"\r",
                    "    },\r",
                    "    \"blobs_url\": {\r",
                    "      \"type\": \"string\"\r",
                    "    },\r",
                    "    \"git_tags_url\": {\r",
                    "      \"type\": \"string\"\r",
                    "    },\r",
                    "    \"git_refs_url\": {\r",
                    "      \"type\": \"string\"\r",
                    "    },\r",
                    "    \"trees_url\": {\r",
                    "      \"type\": \"string\"\r",
                    "    },\r",
                    "    \"statuses_url\": {\r",
                    "      \"type\": \"string\"\r",
                    "    },\r",
                    "    \"languages_url\": {\r",
                    "      \"type\": \"string\"\r",
                    "    },\r",
                    "    \"stargazers_url\": {\r",
                    "      \"type\": \"string\"\r",
                    "    },\r",
                    "    \"contributors_url\": {\r",
                    "      \"type\": \"string\"\r",
                    "    },\r",
                    "    \"subscribers_url\": {\r",
                    "      \"type\": \"string\"\r",
                    "    },\r",
                    "    \"subscription_url\": {\r",
                    "      \"type\": \"string\"\r",
                    "    },\r",
                    "    \"commits_url\": {\r",
                    "      \"type\": \"string\"\r",
                    "    },\r",
                    "    \"git_commits_url\": {\r",
                    "      \"type\": \"string\"\r",
                    "    },\r",
                    "    \"comments_url\": {\r",
                    "      \"type\": \"string\"\r",
                    "    },\r",
                    "    \"issue_comment_url\": {\r",
                    "      \"type\": \"string\"\r",
                    "    },\r",
                    "    \"contents_url\": {\r",
                    "      \"type\": \"string\"\r",
                    "    },\r",
                    "    \"compare_url\": {\r",
                    "      \"type\": \"string\"\r",
                    "    },\r",
                    "    \"merges_url\": {\r",
                    "      \"type\": \"string\"\r",
                    "    },\r",
                    "    \"archive_url\": {\r",
                    "      \"type\": \"string\"\r",
                    "    },\r",
                    "    \"downloads_url\": {\r",
                    "      \"type\": \"string\"\r",
                    "    },\r",
                    "    \"issues_url\": {\r",
                    "      \"type\": \"string\"\r",
                    "    },\r",
                    "    \"pulls_url\": {\r",
                    "      \"type\": \"string\"\r",
                    "    },\r",
                    "    \"milestones_url\": {\r",
                    "      \"type\": \"string\"\r",
                    "    },\r",
                    "    \"notifications_url\": {\r",
                    "      \"type\": \"string\"\r",
                    "    },\r",
                    "    \"labels_url\": {\r",
                    "      \"type\": \"string\"\r",
                    "    },\r",
                    "    \"releases_url\": {\r",
                    "      \"type\": \"string\"\r",
                    "    },\r",
                    "    \"deployments_url\": {\r",
                    "      \"type\": \"string\"\r",
                    "    },\r",
                    "    \"created_at\": {\r",
                    "      \"type\": \"string\"\r",
                    "    },\r",
                    "    \"updated_at\": {\r",
                    "      \"type\": \"string\"\r",
                    "    },\r",
                    "    \"pushed_at\": {\r",
                    "      \"type\": \"string\"\r",
                    "    },\r",
                    "    \"git_url\": {\r",
                    "      \"type\": \"string\"\r",
                    "    },\r",
                    "    \"ssh_url\": {\r",
                    "      \"type\": \"string\"\r",
                    "    },\r",
                    "    \"clone_url\": {\r",
                    "      \"type\": \"string\"\r",
                    "    },\r",
                    "    \"svn_url\": {\r",
                    "      \"type\": \"string\"\r",
                    "    },\r",
                    "    \"homepage\": {\r",
                    "      \"type\": \"null\"\r",
                    "    },\r",
                    "    \"size\": {\r",
                    "      \"type\": \"integer\"\r",
                    "    },\r",
                    "    \"stargazers_count\": {\r",
                    "      \"type\": \"integer\"\r",
                    "    },\r",
                    "    \"watchers_count\": {\r",
                    "      \"type\": \"integer\"\r",
                    "    },\r",
                    "    \"language\": {\r",
                    "      \"type\": \"null\"\r",
                    "    },\r",
                    "    \"has_issues\": {\r",
                    "      \"type\": \"boolean\"\r",
                    "    },\r",
                    "    \"has_projects\": {\r",
                    "      \"type\": \"boolean\"\r",
                    "    },\r",
                    "    \"has_downloads\": {\r",
                    "      \"type\": \"boolean\"\r",
                    "    },\r",
                    "    \"has_wiki\": {\r",
                    "      \"type\": \"boolean\"\r",
                    "    },\r",
                    "    \"has_pages\": {\r",
                    "      \"type\": \"boolean\"\r",
                    "    },\r",
                    "    \"forks_count\": {\r",
                    "      \"type\": \"integer\"\r",
                    "    },\r",
                    "    \"mirror_url\": {\r",
                    "      \"type\": \"null\"\r",
                    "    },\r",
                    "    \"archived\": {\r",
                    "      \"type\": \"boolean\"\r",
                    "    },\r",
                    "    \"disabled\": {\r",
                    "      \"type\": \"boolean\"\r",
                    "    },\r",
                    "    \"open_issues_count\": {\r",
                    "      \"type\": \"integer\"\r",
                    "    },\r",
                    "    \"license\": {\r",
                    "      \"type\": \"null\"\r",
                    "    },\r",
                    "    \"allow_forking\": {\r",
                    "      \"type\": \"boolean\"\r",
                    "    },\r",
                    "    \"is_template\": {\r",
                    "      \"type\": \"boolean\"\r",
                    "    },\r",
                    "    \"topics\": {\r",
                    "      \"type\": \"array\",\r",
                    "      \"items\": {}\r",
                    "    },\r",
                    "    \"visibility\": {\r",
                    "      \"type\": \"string\"\r",
                    "    },\r",
                    "    \"forks\": {\r",
                    "      \"type\": \"integer\"\r",
                    "    },\r",
                    "    \"open_issues\": {\r",
                    "      \"type\": \"integer\"\r",
                    "    },\r",
                    "    \"watchers\": {\r",
                    "      \"type\": \"integer\"\r",
                    "    },\r",
                    "    \"default_branch\": {\r",
                    "      \"type\": \"string\"\r",
                    "    },\r",
                    "    \"permissions\": {\r",
                    "      \"type\": \"object\",\r",
                    "      \"properties\": {\r",
                    "        \"admin\": {\r",
                    "          \"type\": \"boolean\"\r",
                    "        },\r",
                    "        \"maintain\": {\r",
                    "          \"type\": \"boolean\"\r",
                    "        },\r",
                    "        \"push\": {\r",
                    "          \"type\": \"boolean\"\r",
                    "        },\r",
                    "        \"triage\": {\r",
                    "          \"type\": \"boolean\"\r",
                    "        },\r",
                    "        \"pull\": {\r",
                    "          \"type\": \"boolean\"\r",
                    "        }\r",
                    "      },\r",
                    "      \"required\": [\r",
                    "        \"admin\",\r",
                    "        \"maintain\",\r",
                    "        \"push\",\r",
                    "        \"triage\",\r",
                    "        \"pull\"\r",
                    "      ]\r",
                    "    },\r",
                    "    \"allow_squash_merge\": {\r",
                    "      \"type\": \"boolean\"\r",
                    "    },\r",
                    "    \"allow_merge_commit\": {\r",
                    "      \"type\": \"boolean\"\r",
                    "    },\r",
                    "    \"allow_rebase_merge\": {\r",
                    "      \"type\": \"boolean\"\r",
                    "    },\r",
                    "    \"allow_auto_merge\": {\r",
                    "      \"type\": \"boolean\"\r",
                    "    },\r",
                    "    \"delete_branch_on_merge\": {\r",
                    "      \"type\": \"boolean\"\r",
                    "    },\r",
                    "    \"allow_update_branch\": {\r",
                    "      \"type\": \"boolean\"\r",
                    "    },\r",
                    "    \"network_count\": {\r",
                    "      \"type\": \"integer\"\r",
                    "    },\r",
                    "    \"subscribers_count\": {\r",
                    "      \"type\": \"integer\"\r",
                    "    }\r",
                    "  },\r",
                    "  \"required\": [\r",
                    "    \"id\",\r",
                    "    \"node_id\",\r",
                    "    \"name\",\r",
                    "    \"full_name\",\r",
                    "    \"private\",\r",
                    "    \"owner\",\r",
                    "    \"html_url\",\r",
                    "    \"description\",\r",
                    "    \"fork\",\r",
                    "    \"url\",\r",
                    "    \"forks_url\",\r",
                    "    \"keys_url\",\r",
                    "    \"collaborators_url\",\r",
                    "    \"teams_url\",\r",
                    "    \"hooks_url\",\r",
                    "    \"issue_events_url\",\r",
                    "    \"events_url\",\r",
                    "    \"assignees_url\",\r",
                    "    \"branches_url\",\r",
                    "    \"tags_url\",\r",
                    "    \"blobs_url\",\r",
                    "    \"git_tags_url\",\r",
                    "    \"git_refs_url\",\r",
                    "    \"trees_url\",\r",
                    "    \"statuses_url\",\r",
                    "    \"languages_url\",\r",
                    "    \"stargazers_url\",\r",
                    "    \"contributors_url\",\r",
                    "    \"subscribers_url\",\r",
                    "    \"subscription_url\",\r",
                    "    \"commits_url\",\r",
                    "    \"git_commits_url\",\r",
                    "    \"comments_url\",\r",
                    "    \"issue_comment_url\",\r",
                    "    \"contents_url\",\r",
                    "    \"compare_url\",\r",
                    "    \"merges_url\",\r",
                    "    \"archive_url\",\r",
                    "    \"downloads_url\",\r",
                    "    \"issues_url\",\r",
                    "    \"pulls_url\",\r",
                    "    \"milestones_url\",\r",
                    "    \"notifications_url\",\r",
                    "    \"labels_url\",\r",
                    "    \"releases_url\",\r",
                    "    \"deployments_url\",\r",
                    "    \"created_at\",\r",
                    "    \"updated_at\",\r",
                    "    \"pushed_at\",\r",
                    "    \"git_url\",\r",
                    "    \"ssh_url\",\r",
                    "    \"clone_url\",\r",
                    "    \"svn_url\",\r",
                    "    \"homepage\",\r",
                    "    \"size\",\r",
                    "    \"stargazers_count\",\r",
                    "    \"watchers_count\",\r",
                    "    \"language\",\r",
                    "    \"has_issues\",\r",
                    "    \"has_projects\",\r",
                    "    \"has_downloads\",\r",
                    "    \"has_wiki\",\r",
                    "    \"has_pages\",\r",
                    "    \"forks_count\",\r",
                    "    \"mirror_url\",\r",
                    "    \"archived\",\r",
                    "    \"disabled\",\r",
                    "    \"open_issues_count\",\r",
                    "    \"license\",\r",
                    "    \"allow_forking\",\r",
                    "    \"is_template\",\r",
                    "    \"topics\",\r",
                    "    \"visibility\",\r",
                    "    \"forks\",\r",
                    "    \"open_issues\",\r",
                    "    \"watchers\",\r",
                    "    \"default_branch\",\r",
                    "    \"permissions\",\r",
                    "    \"allow_squash_merge\",\r",
                    "    \"allow_merge_commit\",\r",
                    "    \"allow_rebase_merge\",\r",
                    "    \"allow_auto_merge\",\r",
                    "    \"delete_branch_on_merge\",\r",
                    "    \"allow_update_branch\",\r",
                    "    \"network_count\",\r",
                    "    \"subscribers_count\"\r",
                    "  ]\r",
                    "}\r",
                    "//test si le schema json de sortie correspond bien à l'attendu\r",
                    "pm.test(\"properties are correct, validate json schema\", function(){\r",
                    "    pm.response.to.have.jsonSchema(schema);\r",
                    "})\r",
                    "//On annonce la prochaine requête à s'éxécuter\r",
                    "postman.setNextRequest(\"Update repo\");\r",
                    " \r",
                    ""
                  ]
                }
              },
              {
                "listen": "prerequest",
                "script": {
                  "type": "text/javascript",
                  "exec": [
                    "pm.variables.replaceIn('{{$randomFirstName}}+{{$randomCatchPhraseDescriptor}}');\r",
                    ""
                  ]
                }
              }
            ],
            "id": "96f87a66-6890-48ce-8c51-cc581171663b",
            "request": {
              "method": "POST",
              "header": [],
              "body": {
                "mode": "raw",
                "raw": "{\r\n    \"name\": \"{{$randomFirstName}}\",\r\n    \"description\": \"{{$randomCatchPhraseDescriptor}}\"\r\n}",
                "options": {
                  "raw": {
                    "language": "json"
                  }
                }
              },
              "url": "{{url}}/user/repos",
              "description": "### @nominal\n\n### Scenario 1: Create repository using GitHub API should return 201 status\n\nGiven API url ‘[https://api.github.com/’](https://desktop.postman.com/?desktopVersion=9.15.2&userId=632327&teamId=0) is up and running  \nAnd header Authorization = 'Bearer ' + GitHubAPIToken  \nWhen a user performs a POST request to ‘[https://api.github.com/user/repos’](https://desktop.postman.com/?desktopVersion=9.15.2&userId=632327&teamId=0) with below details  \n{name: \"{{randomFirstName}}\", description: \"{{randomCatchPhraseDescriptor}}\"}  \nAnd perform the post request  \nThen the response code should be 201  \nAnd the user should see json response with  \nmatch $ == {name:\"{{randomFirstName}}\",description:\"{{randomCatchPhraseDescriptor}}\"}  \nAnd the specified repository should be created"
            },
            "response": []
          }
        ],
        "id": "2e63a69e-43b6-42d4-9340-b9f9c25c2a27"
      },
      {
        "name": "Etape 3 T1 Update Repo",
        "item": [
          {
            "name": "Update repo",
            "event": [
              {
                "listen": "test",
                "script": {
                  "type": "text/javascript",
                  "exec": [
                    "pm.collectionVariables.set(\"name\", pm.response.json().name);\r",
                    "pm.collectionVariables.set(\"description\", pm.response.json().description);\r",
                    "let name =  pm.collectionVariables.get(\"name\");\r",
                    "// let nameR =  pm.collectionVariables.get(\"nameR\");\r",
                    "let description =  pm.collectionVariables.get(\"description\");\r",
                    "\r",
                    "\r",
                    " // Le statut de la réponse est en succès\r",
                    " pm.test(\"Status code is 200\", function () {\r",
                    "    pm.response.to.have.status(200);\r",
                    "    });\r",
                    "\r",
                    "// test \r",
                    " pm.test(\"The repository description is correct\",function(){\r",
                    " const jsonData = pm.response.json();\r",
                    "    pm.expect(jsonData.description).to.eql(description);\r",
                    " })    \r",
                    "\r",
                    "  pm.test(\"The repository name is correct\",function(){\r",
                    " const jsonData = pm.response.json();\r",
                    "    pm.expect(jsonData.name).to.eql(name);\r",
                    " }) \r",
                    "\r",
                    "// le schema json de sortie\r",
                    "const schema={\r",
                    "  \"type\": \"object\",\r",
                    "  \"properties\": {\r",
                    "    \"id\": {\r",
                    "      \"type\": \"integer\"\r",
                    "    },\r",
                    "    \"node_id\": {\r",
                    "      \"type\": \"string\"\r",
                    "    },\r",
                    "    \"name\": {\r",
                    "      \"type\": \"string\"\r",
                    "    },\r",
                    "    \"full_name\": {\r",
                    "      \"type\": \"string\"\r",
                    "    },\r",
                    "    \"private\": {\r",
                    "      \"type\": \"boolean\"\r",
                    "    },\r",
                    "    \"owner\": {\r",
                    "      \"type\": \"object\",\r",
                    "      \"properties\": {\r",
                    "        \"login\": {\r",
                    "          \"type\": \"string\"\r",
                    "        },\r",
                    "        \"id\": {\r",
                    "          \"type\": \"integer\"\r",
                    "        },\r",
                    "        \"node_id\": {\r",
                    "          \"type\": \"string\"\r",
                    "        },\r",
                    "        \"avatar_url\": {\r",
                    "          \"type\": \"string\"\r",
                    "        },\r",
                    "        \"gravatar_id\": {\r",
                    "          \"type\": \"string\"\r",
                    "        },\r",
                    "        \"url\": {\r",
                    "          \"type\": \"string\"\r",
                    "        },\r",
                    "        \"html_url\": {\r",
                    "          \"type\": \"string\"\r",
                    "        },\r",
                    "        \"followers_url\": {\r",
                    "          \"type\": \"string\"\r",
                    "        },\r",
                    "        \"following_url\": {\r",
                    "          \"type\": \"string\"\r",
                    "        },\r",
                    "        \"gists_url\": {\r",
                    "          \"type\": \"string\"\r",
                    "        },\r",
                    "        \"starred_url\": {\r",
                    "          \"type\": \"string\"\r",
                    "        },\r",
                    "        \"subscriptions_url\": {\r",
                    "          \"type\": \"string\"\r",
                    "        },\r",
                    "        \"organizations_url\": {\r",
                    "          \"type\": \"string\"\r",
                    "        },\r",
                    "        \"repos_url\": {\r",
                    "          \"type\": \"string\"\r",
                    "        },\r",
                    "        \"events_url\": {\r",
                    "          \"type\": \"string\"\r",
                    "        },\r",
                    "        \"received_events_url\": {\r",
                    "          \"type\": \"string\"\r",
                    "        },\r",
                    "        \"type\": {\r",
                    "          \"type\": \"string\"\r",
                    "        },\r",
                    "        \"site_admin\": {\r",
                    "          \"type\": \"boolean\"\r",
                    "        }\r",
                    "      },\r",
                    "      \"required\": [\r",
                    "        \"login\",\r",
                    "        \"id\",\r",
                    "        \"node_id\",\r",
                    "        \"avatar_url\",\r",
                    "        \"gravatar_id\",\r",
                    "        \"url\",\r",
                    "        \"html_url\",\r",
                    "        \"followers_url\",\r",
                    "        \"following_url\",\r",
                    "        \"gists_url\",\r",
                    "        \"starred_url\",\r",
                    "        \"subscriptions_url\",\r",
                    "        \"organizations_url\",\r",
                    "        \"repos_url\",\r",
                    "        \"events_url\",\r",
                    "        \"received_events_url\",\r",
                    "        \"type\",\r",
                    "        \"site_admin\"\r",
                    "      ]\r",
                    "    },\r",
                    "    \"html_url\": {\r",
                    "      \"type\": \"string\"\r",
                    "    },\r",
                    "    \"description\": {\r",
                    "      \"type\": \"string\"\r",
                    "    },\r",
                    "    \"fork\": {\r",
                    "      \"type\": \"boolean\"\r",
                    "    },\r",
                    "    \"url\": {\r",
                    "      \"type\": \"string\"\r",
                    "    },\r",
                    "    \"forks_url\": {\r",
                    "      \"type\": \"string\"\r",
                    "    },\r",
                    "    \"keys_url\": {\r",
                    "      \"type\": \"string\"\r",
                    "    },\r",
                    "    \"collaborators_url\": {\r",
                    "      \"type\": \"string\"\r",
                    "    },\r",
                    "    \"teams_url\": {\r",
                    "      \"type\": \"string\"\r",
                    "    },\r",
                    "    \"hooks_url\": {\r",
                    "      \"type\": \"string\"\r",
                    "    },\r",
                    "    \"issue_events_url\": {\r",
                    "      \"type\": \"string\"\r",
                    "    },\r",
                    "    \"events_url\": {\r",
                    "      \"type\": \"string\"\r",
                    "    },\r",
                    "    \"assignees_url\": {\r",
                    "      \"type\": \"string\"\r",
                    "    },\r",
                    "    \"branches_url\": {\r",
                    "      \"type\": \"string\"\r",
                    "    },\r",
                    "    \"tags_url\": {\r",
                    "      \"type\": \"string\"\r",
                    "    },\r",
                    "    \"blobs_url\": {\r",
                    "      \"type\": \"string\"\r",
                    "    },\r",
                    "    \"git_tags_url\": {\r",
                    "      \"type\": \"string\"\r",
                    "    },\r",
                    "    \"git_refs_url\": {\r",
                    "      \"type\": \"string\"\r",
                    "    },\r",
                    "    \"trees_url\": {\r",
                    "      \"type\": \"string\"\r",
                    "    },\r",
                    "    \"statuses_url\": {\r",
                    "      \"type\": \"string\"\r",
                    "    },\r",
                    "    \"languages_url\": {\r",
                    "      \"type\": \"string\"\r",
                    "    },\r",
                    "    \"stargazers_url\": {\r",
                    "      \"type\": \"string\"\r",
                    "    },\r",
                    "    \"contributors_url\": {\r",
                    "      \"type\": \"string\"\r",
                    "    },\r",
                    "    \"subscribers_url\": {\r",
                    "      \"type\": \"string\"\r",
                    "    },\r",
                    "    \"subscription_url\": {\r",
                    "      \"type\": \"string\"\r",
                    "    },\r",
                    "    \"commits_url\": {\r",
                    "      \"type\": \"string\"\r",
                    "    },\r",
                    "    \"git_commits_url\": {\r",
                    "      \"type\": \"string\"\r",
                    "    },\r",
                    "    \"comments_url\": {\r",
                    "      \"type\": \"string\"\r",
                    "    },\r",
                    "    \"issue_comment_url\": {\r",
                    "      \"type\": \"string\"\r",
                    "    },\r",
                    "    \"contents_url\": {\r",
                    "      \"type\": \"string\"\r",
                    "    },\r",
                    "    \"compare_url\": {\r",
                    "      \"type\": \"string\"\r",
                    "    },\r",
                    "    \"merges_url\": {\r",
                    "      \"type\": \"string\"\r",
                    "    },\r",
                    "    \"archive_url\": {\r",
                    "      \"type\": \"string\"\r",
                    "    },\r",
                    "    \"downloads_url\": {\r",
                    "      \"type\": \"string\"\r",
                    "    },\r",
                    "    \"issues_url\": {\r",
                    "      \"type\": \"string\"\r",
                    "    },\r",
                    "    \"pulls_url\": {\r",
                    "      \"type\": \"string\"\r",
                    "    },\r",
                    "    \"milestones_url\": {\r",
                    "      \"type\": \"string\"\r",
                    "    },\r",
                    "    \"notifications_url\": {\r",
                    "      \"type\": \"string\"\r",
                    "    },\r",
                    "    \"labels_url\": {\r",
                    "      \"type\": \"string\"\r",
                    "    },\r",
                    "    \"releases_url\": {\r",
                    "      \"type\": \"string\"\r",
                    "    },\r",
                    "    \"deployments_url\": {\r",
                    "      \"type\": \"string\"\r",
                    "    },\r",
                    "    \"created_at\": {\r",
                    "      \"type\": \"string\"\r",
                    "    },\r",
                    "    \"updated_at\": {\r",
                    "      \"type\": \"string\"\r",
                    "    },\r",
                    "    \"pushed_at\": {\r",
                    "      \"type\": \"string\"\r",
                    "    },\r",
                    "    \"git_url\": {\r",
                    "      \"type\": \"string\"\r",
                    "    },\r",
                    "    \"ssh_url\": {\r",
                    "      \"type\": \"string\"\r",
                    "    },\r",
                    "    \"clone_url\": {\r",
                    "      \"type\": \"string\"\r",
                    "    },\r",
                    "    \"svn_url\": {\r",
                    "      \"type\": \"string\"\r",
                    "    },\r",
                    "    \"homepage\": {\r",
                    "      \"type\": \"null\"\r",
                    "    },\r",
                    "    \"size\": {\r",
                    "      \"type\": \"integer\"\r",
                    "    },\r",
                    "    \"stargazers_count\": {\r",
                    "      \"type\": \"integer\"\r",
                    "    },\r",
                    "    \"watchers_count\": {\r",
                    "      \"type\": \"integer\"\r",
                    "    },\r",
                    "    \"language\": {\r",
                    "      \"type\": \"null\"\r",
                    "    },\r",
                    "    \"has_issues\": {\r",
                    "      \"type\": \"boolean\"\r",
                    "    },\r",
                    "    \"has_projects\": {\r",
                    "      \"type\": \"boolean\"\r",
                    "    },\r",
                    "    \"has_downloads\": {\r",
                    "      \"type\": \"boolean\"\r",
                    "    },\r",
                    "    \"has_wiki\": {\r",
                    "      \"type\": \"boolean\"\r",
                    "    },\r",
                    "    \"has_pages\": {\r",
                    "      \"type\": \"boolean\"\r",
                    "    },\r",
                    "    \"forks_count\": {\r",
                    "      \"type\": \"integer\"\r",
                    "    },\r",
                    "    \"mirror_url\": {\r",
                    "      \"type\": \"null\"\r",
                    "    },\r",
                    "    \"archived\": {\r",
                    "      \"type\": \"boolean\"\r",
                    "    },\r",
                    "    \"disabled\": {\r",
                    "      \"type\": \"boolean\"\r",
                    "    },\r",
                    "    \"open_issues_count\": {\r",
                    "      \"type\": \"integer\"\r",
                    "    },\r",
                    "    \"license\": {\r",
                    "      \"type\": \"null\"\r",
                    "    },\r",
                    "    \"allow_forking\": {\r",
                    "      \"type\": \"boolean\"\r",
                    "    },\r",
                    "    \"is_template\": {\r",
                    "      \"type\": \"boolean\"\r",
                    "    },\r",
                    "    \"topics\": {\r",
                    "      \"type\": \"array\",\r",
                    "      \"items\": {}\r",
                    "    },\r",
                    "    \"visibility\": {\r",
                    "      \"type\": \"string\"\r",
                    "    },\r",
                    "    \"forks\": {\r",
                    "      \"type\": \"integer\"\r",
                    "    },\r",
                    "    \"open_issues\": {\r",
                    "      \"type\": \"integer\"\r",
                    "    },\r",
                    "    \"watchers\": {\r",
                    "      \"type\": \"integer\"\r",
                    "    },\r",
                    "    \"default_branch\": {\r",
                    "      \"type\": \"string\"\r",
                    "    },\r",
                    "    \"permissions\": {\r",
                    "      \"type\": \"object\",\r",
                    "      \"properties\": {\r",
                    "        \"admin\": {\r",
                    "          \"type\": \"boolean\"\r",
                    "        },\r",
                    "        \"maintain\": {\r",
                    "          \"type\": \"boolean\"\r",
                    "        },\r",
                    "        \"push\": {\r",
                    "          \"type\": \"boolean\"\r",
                    "        },\r",
                    "        \"triage\": {\r",
                    "          \"type\": \"boolean\"\r",
                    "        },\r",
                    "        \"pull\": {\r",
                    "          \"type\": \"boolean\"\r",
                    "        }\r",
                    "      },\r",
                    "      \"required\": [\r",
                    "        \"admin\",\r",
                    "        \"maintain\",\r",
                    "        \"push\",\r",
                    "        \"triage\",\r",
                    "        \"pull\"\r",
                    "      ]\r",
                    "    },\r",
                    "    \"allow_squash_merge\": {\r",
                    "      \"type\": \"boolean\"\r",
                    "    },\r",
                    "    \"allow_merge_commit\": {\r",
                    "      \"type\": \"boolean\"\r",
                    "    },\r",
                    "    \"allow_rebase_merge\": {\r",
                    "      \"type\": \"boolean\"\r",
                    "    },\r",
                    "    \"allow_auto_merge\": {\r",
                    "      \"type\": \"boolean\"\r",
                    "    },\r",
                    "    \"delete_branch_on_merge\": {\r",
                    "      \"type\": \"boolean\"\r",
                    "    },\r",
                    "    \"allow_update_branch\": {\r",
                    "      \"type\": \"boolean\"\r",
                    "    },\r",
                    "    \"network_count\": {\r",
                    "      \"type\": \"integer\"\r",
                    "    },\r",
                    "    \"subscribers_count\": {\r",
                    "      \"type\": \"integer\"\r",
                    "    }\r",
                    "  },\r",
                    "  \"required\": [\r",
                    "    \"id\",\r",
                    "    \"node_id\",\r",
                    "    \"name\",\r",
                    "    \"full_name\",\r",
                    "    \"private\",\r",
                    "    \"owner\",\r",
                    "    \"html_url\",\r",
                    "    \"description\",\r",
                    "    \"fork\",\r",
                    "    \"url\",\r",
                    "    \"forks_url\",\r",
                    "    \"keys_url\",\r",
                    "    \"collaborators_url\",\r",
                    "    \"teams_url\",\r",
                    "    \"hooks_url\",\r",
                    "    \"issue_events_url\",\r",
                    "    \"events_url\",\r",
                    "    \"assignees_url\",\r",
                    "    \"branches_url\",\r",
                    "    \"tags_url\",\r",
                    "    \"blobs_url\",\r",
                    "    \"git_tags_url\",\r",
                    "    \"git_refs_url\",\r",
                    "    \"trees_url\",\r",
                    "    \"statuses_url\",\r",
                    "    \"languages_url\",\r",
                    "    \"stargazers_url\",\r",
                    "    \"contributors_url\",\r",
                    "    \"subscribers_url\",\r",
                    "    \"subscription_url\",\r",
                    "    \"commits_url\",\r",
                    "    \"git_commits_url\",\r",
                    "    \"comments_url\",\r",
                    "    \"issue_comment_url\",\r",
                    "    \"contents_url\",\r",
                    "    \"compare_url\",\r",
                    "    \"merges_url\",\r",
                    "    \"archive_url\",\r",
                    "    \"downloads_url\",\r",
                    "    \"issues_url\",\r",
                    "    \"pulls_url\",\r",
                    "    \"milestones_url\",\r",
                    "    \"notifications_url\",\r",
                    "    \"labels_url\",\r",
                    "    \"releases_url\",\r",
                    "    \"deployments_url\",\r",
                    "    \"created_at\",\r",
                    "    \"updated_at\",\r",
                    "    \"pushed_at\",\r",
                    "    \"git_url\",\r",
                    "    \"ssh_url\",\r",
                    "    \"clone_url\",\r",
                    "    \"svn_url\",\r",
                    "    \"homepage\",\r",
                    "    \"size\",\r",
                    "    \"stargazers_count\",\r",
                    "    \"watchers_count\",\r",
                    "    \"language\",\r",
                    "    \"has_issues\",\r",
                    "    \"has_projects\",\r",
                    "    \"has_downloads\",\r",
                    "    \"has_wiki\",\r",
                    "    \"has_pages\",\r",
                    "    \"forks_count\",\r",
                    "    \"mirror_url\",\r",
                    "    \"archived\",\r",
                    "    \"disabled\",\r",
                    "    \"open_issues_count\",\r",
                    "    \"license\",\r",
                    "    \"allow_forking\",\r",
                    "    \"is_template\",\r",
                    "    \"topics\",\r",
                    "    \"visibility\",\r",
                    "    \"forks\",\r",
                    "    \"open_issues\",\r",
                    "    \"watchers\",\r",
                    "    \"default_branch\",\r",
                    "    \"permissions\",\r",
                    "    \"allow_squash_merge\",\r",
                    "    \"allow_merge_commit\",\r",
                    "    \"allow_rebase_merge\",\r",
                    "    \"allow_auto_merge\",\r",
                    "    \"delete_branch_on_merge\",\r",
                    "    \"allow_update_branch\",\r",
                    "    \"network_count\",\r",
                    "    \"subscribers_count\"\r",
                    "  ]\r",
                    "}\r",
                    "//test si le schema json de sortie correspond bien à l'attendu\r",
                    "pm.test(\"properties are correct, validate json schema\", function(){\r",
                    "    pm.response.to.have.jsonSchema(schema);\r",
                    "})\r",
                    "\r",
                    "//On annonce la prochaine requête à s'éxécuter\r",
                    " postman.setNextRequest(\"Delete existing repo\"); \r",
                    ""
                  ]
                }
              },
              {
                "listen": "prerequest",
                "script": {
                  "type": "text/javascript",
                  "exec": [
                    "pm.variables.replaceIn('{{$randomFirstName}}+{{$randomCatchPhraseDescriptor}}')"
                  ]
                }
              }
            ],
            "id": "1453042d-3348-4d60-89c3-bdf2f07b651d",
            "request": {
              "method": "PATCH",
              "header": [],
              "body": {
                "mode": "raw",
                "raw": "{\r\n    \"name\": \"{{$randomFirstName}}\",\r\n    \"description\": \"{{$randomCatchPhraseDescriptor}}\"\r\n}\r\n",
                "options": {
                  "raw": {
                    "language": "json"
                  }
                }
              },
              "url": {
                "raw": "{{url}}/repos/:owner/{{envNameR}}",
                "host": [
                  "{{url}}"
                ],
                "path": [
                  "repos",
                  ":owner",
                  "{{envNameR}}"
                ],
                "variable": [
                  {
                    "key": "owner",
                    "value": "{{username}}"
                  }
                ]
              },
              "description": "### @nominal\n\n### Scenario 2: Update repository using GitHub API should return 200 status\n\nGiven API url ‘[https://api.github.com/’](https://desktop.postman.com/?desktopVersion=9.15.2&userId=632327&teamId=0) is up and running  \nAnd header Authorization = 'Bearer ' + GitHubAPIToken  \nWhen a user performs a PATCH request to ‘[https://api.github.com/repos/{{userName}}/Groupe1Projet1FirstRepo’](https://desktop.postman.com/?desktopVersion=9.15.2&userId=632327&teamId=0) with below details  \n{name: \"{{randomFirstName}}\", description: \"{{randomCatchPhraseDescriptor}}\"}  \nThen the response code should be 200  \nAnd the user should see json response with  \nmatch $ == {name:\"{{randomFirstName}}\",description:\"{{randomCatchPhraseDescriptor}}\"}  \nAnd the specified repository should be updated"
            },
            "response": []
          },
          {
            "name": "Update non-existing repo",
            "event": [
              {
                "listen": "test",
                "script": {
                  "type": "text/javascript",
                  "exec": [
                    " // Le statut de la réponse est en succès\r",
                    " pm.test(\"Status code is 404\", function () {\r",
                    "    pm.response.to.have.status(404);\r",
                    "    });\r",
                    "\r",
                    " postman.setNextRequest(\"Delete existing repo\");  "
                  ]
                }
              },
              {
                "listen": "prerequest",
                "script": {
                  "type": "text/javascript",
                  "exec": [
                    "pm.variables.replaceIn('{{$randomFirstName}}+{{$randomCatchPhraseDescriptor}}')"
                  ]
                }
              }
            ],
            "id": "ab7a7a4a-3b6a-4bf9-bda2-e352e242e771",
            "request": {
              "method": "PATCH",
              "header": [],
              "body": {
                "mode": "raw",
                "raw": "{\r\n    \"name\": \"{{$randomFirstName}}\",\r\n    \"description\": \"{{$randomCatchPhraseDescriptor}}\"\r\n}\r\n",
                "options": {
                  "raw": {
                    "language": "json"
                  }
                }
              },
              "url": {
                "raw": "{{url}}/repos/:owner/nonexistingrepo",
                "host": [
                  "{{url}}"
                ],
                "path": [
                  "repos",
                  ":owner",
                  "nonexistingrepo"
                ],
                "variable": [
                  {
                    "id": "936d29f5-30ea-4076-9dd5-7a5f41a5d986",
                    "key": "owner",
                    "value": "{{username}}"
                  }
                ]
              }
            },
            "response": []
          }
        ],
        "id": "03fd132b-895b-4cfb-8eae-50c7965fba4b"
      },
      {
        "name": "Etape 4 T1 Delete Repo",
        "item": [
          {
            "name": "Delete existing repo",
            "event": [
              {
                "listen": "test",
                "script": {
                  "type": "text/javascript",
                  "exec": [
                    "pm.test(\"GitHub Repository is deleted\", function(){\r",
                    "    pm.response.to.have.status(204); \r",
                    "})\r",
                    "\r",
                    "//On annonce la prochaine requête à s'éxécuter\r",
                    "postman.setNextRequest(\"get all repo\");"
                  ]
                }
              }
            ],
            "id": "f03f709c-43c9-49b0-b130-93528b50b07d",
            "request": {
              "method": "DELETE",
              "header": [],
              "url": {
                "raw": "{{url}}/repos/:owner/:repo",
                "host": [
                  "{{url}}"
                ],
                "path": [
                  "repos",
                  ":owner",
                  ":repo"
                ],
                "variable": [
                  {
                    "key": "owner",
                    "value": "{{username}}"
                  },
                  {
                    "key": "repo",
                    "value": "{{envNameR}}"
                  }
                ]
              },
              "description": "### @nominal\n\n### Scenario 3: Delete repository using GitHub API should return 204 status\n\nGiven API url ‘[https://api.github.com/’](https://desktop.postman.com/?desktopVersion=9.15.2&userId=632327&teamId=0) is up and running  \nAnd header Authorization = 'Bearer ' + GitHubAPIToken  \nWhen a user performs a DELETE request to ‘[https://api.github.com/repos/{{userName}}/Groupe1Projet1FirstRepo’](https://desktop.postman.com/?desktopVersion=9.15.2&userId=632327&teamId=0) with query parameters as \"[{{userName}}/Groupe1Projet1FirstRepo](https://desktop.postman.com/?desktopVersion=9.15.2&userId=632327&teamId=0)\"  \nThen the response code should be 204  \nAnd the specified repository should be deleted"
            },
            "response": []
          },
          {
            "name": "Delete non-existing repo",
            "event": [
              {
                "listen": "test",
                "script": {
                  "type": "text/javascript",
                  "exec": [
                    "pm.test(\"GitHub Repository doesn't exist\", function(){\r",
                    "    pm.response.to.have.status(404); \r",
                    "})\r",
                    "\r",
                    "postman.setNextRequest(\"get all repo\");"
                  ]
                }
              }
            ],
            "id": "b680485f-1733-4d58-95fa-bffdf8a2af84",
            "request": {
              "method": "DELETE",
              "header": [],
              "url": {
                "raw": "{{url}}/repos/:owner/nonexistingrepo",
                "host": [
                  "{{url}}"
                ],
                "path": [
                  "repos",
                  ":owner",
                  "nonexistingrepo"
                ],
                "variable": [
                  {
                    "id": "b2c3663d-b6a6-47fc-ab8c-20e08403c0aa",
                    "key": "owner",
                    "value": "{{username}}"
                  }
                ]
              }
            },
            "response": []
          }
        ],
        "id": "371a73f0-78e7-45ec-a62e-f035291c286d"
      },
      {
        "name": "Etape 5 T1 Get all repo",
        "item": [
          {
            "name": "get all repo",
            "event": [
              {
                "listen": "test",
                "script": {
                  "type": "text/javascript",
                  "exec": [
                    "let repoName = pm.collectionVariables.get(\"repoName\");\r",
                    "\r",
                    "pm.test(\"Status code is 200\", function () {\r",
                    "    pm.response.to.have.status(200);\r",
                    "});\r",
                    "\r",
                    "// saving the API Response as a variable\r",
                    "let response = pm.response.json();\r",
                    "\r",
                    "pm.test(\"repository created step 1 doesn't exist\", () => {\r",
                    "    response.every(jsonData => {\r",
                    "        pm.expect(jsonData.name).to.not.be.eql(repoName);\r",
                    "    });\r",
                    "});\r",
                    "\r",
                    "//On stop le process pour éviter de boucler\r",
                    "postman.setNextRequest(null);\r",
                    ""
                  ]
                }
              }
            ],
            "id": "0a20e4ed-ea0a-4c4c-b5a8-15672d4c4cd3",
            "request": {
              "method": "GET",
              "header": [],
              "url": "{{url}}/user/repos",
              "description": "### @nominal\n\n### Scenario 4: Get repositories using GitHub API should return 200 status\n\nGiven API url ‘[https://api.github.com/’](https://desktop.postman.com/?desktopVersion=9.15.2&userId=632327&teamId=0) is up and running  \nAnd header Authorization = 'Bearer ' + GitHubAPIToken  \nWhen a user performs a GET request to ‘[https://api.github.com/{{userName}}/repos’](https://desktop.postman.com/?desktopVersion=9.15.2&userId=632327&teamId=0)  \nThen the response code should be 200  \nAnd the user should see json response with all repositories listed"
            },
            "response": []
          }
        ],
        "id": "fd99ce51-97da-4a0a-9b97-535faddfaa7a"
      }
    ],
    "auth": {
      "type": "bearer",
      "bearer": {
        "token": "{{token}}"
      }
    },
    "event": [
      {
        "listen": "prerequest",
        "script": {
          "id": "da9554e8-25f0-4db1-832c-c36b5cd2cf1a",
          "type": "text/javascript",
          "exec": [
            ""
          ]
        }
      },
      {
        "listen": "test",
        "script": {
          "id": "87f2a7db-1af8-4427-918d-7f45dd96dc1a",
          "type": "text/javascript",
          "exec": [
            ""
          ]
        }
      }
    ],
    "variable": [
      {
        "id": "35221ec3-cdbd-4795-aa48-3a83f508f4fd",
        "key": "username",
        "value": "groupe1-projet1",
        "type": "string"
      },
      {
        "id": "8dfb52c8-9b18-4b52-bb5e-698a044579a5",
        "key": "url",
        "value": "https://api.github.com",
        "type": "string"
      },
      {
        "id": "3a20688f-5fee-4736-ba7b-114cb8797536",
        "key": "repoName",
        "value": "Groupe1Projet1FirstRepo",
        "type": "string"
      },
      {
        "id": "f672d325-71f7-422e-a2a8-ebd0dbd35cb2",
        "key": "name",
        "value": ""
      },
      {
        "id": "d4f74d50-1070-463f-bb02-02ae22dd56cd",
        "key": "description",
        "value": ""
      },
      {
        "id": "d58cd63c-578d-413e-a536-952207afcb96",
        "key": "nameR",
        "value": "{{envNameR}}",
        "type": "string"
      }
    ]
  }